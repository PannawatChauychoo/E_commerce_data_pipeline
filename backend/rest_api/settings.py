"""
Django settings for rest_api project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from pathlib import Path

import dj_database_url
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")

# Add data_pipeline/method to Python path for imports
# This works for both local development and Railway deployment
method_path = os.path.join(BASE_DIR, "../data_pipeline/method")
if os.path.exists(method_path):
    sys.path.append(method_path)
else:
    # Fallback for Railway - try from project root
    root_method_path = os.path.join(BASE_DIR, "../../data_pipeline/method")
    if os.path.exists(root_method_path):
        sys.path.append(root_method_path)
    else:
        # Last fallback - current working directory based
        cwd_method_path = os.path.join(os.getcwd(), "data_pipeline/method")
        if os.path.exists(cwd_method_path):
            sys.path.append(cwd_method_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-y7k@o+%51pcs9!^zzs0ub9rxa#b&c009*r5p_#v@sy8177md_4"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() == "true"

# Base allowed hosts from environment
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")

# Always add Railway's healthcheck domain for production
# Also detect Railway deployment environment
if os.getenv("DATABASE_URL") or os.getenv("RAILWAY_ENVIRONMENT"):
    ALLOWED_HOSTS.extend([
        "healthcheck.railway.app",
        ".railway.app",  # Allow all Railway subdomains
    ])
    # Force production settings for Railway
    DEBUG = False


# Application definition

INSTALLED_APPS = [
    "api",
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
]

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ]
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "rest_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "rest_api.wsgi.application"

CORS_ALLOW_ALL_ORIGINS = False

# Environment-aware CORS settings
CORS_ALLOWED_ORIGINS = os.getenv(
    "CORS_ALLOWED_ORIGINS",
    "http://localhost:3000,http://127.0.0.1:3000",
).split(",")

CORS_ALLOW_CREDENTIALS = True
CSRF_TRUSTED_ORIGINS = os.getenv(
    "CSRF_TRUSTED_ORIGINS", "http://localhost:3000,http://127.0.0.1:3000"
).split(",")
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration - Railway uses DATABASE_URL in production

# Check if we should disable database (for cache-only deployment)
DISABLE_DATABASE = os.getenv("DISABLE_DATABASE", "False").lower() == "true"

if DISABLE_DATABASE:
    # Cache-only mode: Use dummy database
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.dummy",
        }
    }
elif os.getenv("DATABASE_URL"):
    # Production: Use Railway's DATABASE_URL
    DATABASES = {
        "default": dj_database_url.config(
            default=os.getenv("DATABASE_URL"),
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
    # Ensure walmart schema is used in production
    DATABASES["default"]["OPTIONS"] = {"options": "-c search_path=walmart"}
else:
    # Development: Use individual env vars
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("DB_NAME"),
            "USER": os.getenv("DB_USER"),
            "PASSWORD": os.getenv("DB_PASSWORD"),
            "HOST": os.getenv("DB_HOST", "localhost"),
            "PORT": int(os.getenv("DB_PORT", 5432)),
            "OPTIONS": {"options": "-c search_path=walmart"},
        }
    }

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
